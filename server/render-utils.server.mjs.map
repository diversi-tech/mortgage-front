{
  "version": 3,
  "sources": ["angular:server-render-utils:angular:server-render-utils"],
  "sourcesContent": ["export { \u0275Console } from '@angular/core';\nexport { renderApplication, renderModule, \u0275SERVER_CONTEXT } from '@angular/platform-server';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { ApplicationRef, Compiler, createPlatformFactory, platformCore, \u0275whenStable as whenStable, \u0275Console, } from '@angular/core';\nimport { INITIAL_CONFIG, \u0275INTERNAL_SERVER_PLATFORM_PROVIDERS as INTERNAL_SERVER_PLATFORM_PROVIDERS, } from '@angular/platform-server';\nimport { Router, \u0275loadChildren as loadChildrenHelper } from '@angular/router';\nasync function* getRoutesFromRouterConfig(routes, compiler, parentInjector, parentRoute = '') {\n    for (const route of routes) {\n        const { path, redirectTo, loadChildren, children } = route;\n        if (path === undefined) {\n            continue;\n        }\n        const currentRoutePath = buildRoutePath(parentRoute, path);\n        if (redirectTo !== undefined) {\n            // TODO: handle `redirectTo`.\n            yield { route: currentRoutePath, success: false, redirect: true };\n            continue;\n        }\n        if (/[:*]/.test(path)) {\n            // TODO: handle parameterized routes population.\n            yield { route: currentRoutePath, success: false, redirect: false };\n            continue;\n        }\n        yield { route: currentRoutePath, success: true, redirect: false };\n        if (children?.length) {\n            yield* getRoutesFromRouterConfig(children, compiler, parentInjector, currentRoutePath);\n        }\n        if (loadChildren) {\n            const loadedChildRoutes = await loadChildrenHelper(route, compiler, parentInjector).toPromise();\n            if (loadedChildRoutes) {\n                const { routes: childRoutes, injector = parentInjector } = loadedChildRoutes;\n                yield* getRoutesFromRouterConfig(childRoutes, compiler, injector, currentRoutePath);\n            }\n        }\n    }\n}\nexport async function* extractRoutes(bootstrapAppFnOrModule, document) {\n    const platformRef = createPlatformFactory(platformCore, 'server', [\n        {\n            provide: INITIAL_CONFIG,\n            useValue: { document, url: '' },\n        },\n        {\n            provide: \u0275Console,\n            /** An Angular Console Provider that does not print a set of predefined logs. */\n            useFactory: () => {\n                class Console extends \u0275Console {\n                    ignoredLogs = new Set(['Angular is running in development mode.']);\n                    log(message) {\n                        if (!this.ignoredLogs.has(message)) {\n                            super.log(message);\n                        }\n                    }\n                }\n                return new Console();\n            },\n        },\n        ...INTERNAL_SERVER_PLATFORM_PROVIDERS,\n    ])();\n    try {\n        let applicationRef;\n        if (isBootstrapFn(bootstrapAppFnOrModule)) {\n            applicationRef = await bootstrapAppFnOrModule();\n        }\n        else {\n            const moduleRef = await platformRef.bootstrapModule(bootstrapAppFnOrModule);\n            applicationRef = moduleRef.injector.get(ApplicationRef);\n        }\n        // Wait until the application is stable.\n        await whenStable(applicationRef);\n        const injector = applicationRef.injector;\n        const router = injector.get(Router);\n        if (router.config.length === 0) {\n            // In case there are no routes available\n            yield { route: '', success: true, redirect: false };\n        }\n        else {\n            const compiler = injector.get(Compiler);\n            // Extract all the routes from the config.\n            yield* getRoutesFromRouterConfig(router.config, compiler, injector);\n        }\n    }\n    finally {\n        platformRef.destroy();\n    }\n}\nfunction isBootstrapFn(value) {\n    // We can differentiate between a module and a bootstrap function by reading compiler-generated `\u0275mod` static property:\n    return typeof value === 'function' && !('\u0275mod' in value);\n}\nfunction buildRoutePath(...routeParts) {\n    return routeParts.filter(Boolean).join('/');\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAYA,SAAgB,0BAA0B,QAAQ,UAAU,gBAAgB,cAAc,IAAI;AAAA;AAC1F,eAAW,SAAS,QAAQ;AACxB,YAAM,EAAE,MAAM,YAAY,cAAAA,eAAc,SAAS,IAAI;AACrD,UAAI,SAAS,QAAW;AACpB;AAAA,MACJ;AACA,YAAM,mBAAmB,eAAe,aAAa,IAAI;AACzD,UAAI,eAAe,QAAW;AAE1B,cAAM,EAAE,OAAO,kBAAkB,SAAS,OAAO,UAAU,KAAK;AAChE;AAAA,MACJ;AACA,UAAI,OAAO,KAAK,IAAI,GAAG;AAEnB,cAAM,EAAE,OAAO,kBAAkB,SAAS,OAAO,UAAU,MAAM;AACjE;AAAA,MACJ;AACA,YAAM,EAAE,OAAO,kBAAkB,SAAS,MAAM,UAAU,MAAM;AAChE,UAAI,UAAU,QAAQ;AAClB,2BAAO,0BAA0B,UAAU,UAAU,gBAAgB,gBAAgB;AAAA,MACzF;AACA,UAAIA,eAAc;AACd,cAAM,oBAAoB,kBAAM,aAAmB,OAAO,UAAU,cAAc,EAAE,UAAU;AAC9F,YAAI,mBAAmB;AACnB,gBAAM,EAAE,QAAQ,aAAa,WAAW,eAAe,IAAI;AAC3D,6BAAO,0BAA0B,aAAa,UAAU,UAAU,gBAAgB;AAAA,QACtF;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AACA,SAAuB,cAAc,wBAAwB,UAAU;AAAA;AACnE,UAAM,cAAc,sBAAsB,cAAc,UAAU;AAAA,MAC9D;AAAA,QACI,SAAS;AAAA,QACT,UAAU,EAAE,UAAU,KAAK,GAAG;AAAA,MAClC;AAAA,MACA;AAAA,QACI,SAAS;AAAA;AAAA,QAET,YAAY,MAAM;AAAA,UACd,MAAMC,iBAAgB,QAAS;AAAA,YAC3B,cAAc,oBAAI,IAAI,CAAC,yCAAyC,CAAC;AAAA,YACjE,IAAI,SAAS;AACT,kBAAI,CAAC,KAAK,YAAY,IAAI,OAAO,GAAG;AAChC,sBAAM,IAAI,OAAO;AAAA,cACrB;AAAA,YACJ;AAAA,UACJ;AACA,iBAAO,IAAIA,SAAQ;AAAA,QACvB;AAAA,MACJ;AAAA,MACA,GAAG;AAAA,IACP,CAAC,EAAE;AACH,QAAI;AACA,UAAI;AACJ,UAAI,cAAc,sBAAsB,GAAG;AACvC,yBAAiB,kBAAM,uBAAuB;AAAA,MAClD,OACK;AACD,cAAM,YAAY,kBAAM,YAAY,gBAAgB,sBAAsB;AAC1E,yBAAiB,UAAU,SAAS,IAAI,cAAc;AAAA,MAC1D;AAEA,wBAAM,WAAW,cAAc;AAC/B,YAAM,WAAW,eAAe;AAChC,YAAM,SAAS,SAAS,IAAI,MAAM;AAClC,UAAI,OAAO,OAAO,WAAW,GAAG;AAE5B,cAAM,EAAE,OAAO,IAAI,SAAS,MAAM,UAAU,MAAM;AAAA,MACtD,OACK;AACD,cAAM,WAAW,SAAS,IAAI,QAAQ;AAEtC,2BAAO,0BAA0B,OAAO,QAAQ,UAAU,QAAQ;AAAA,MACtE;AAAA,IACJ,UACA;AACI,kBAAY,QAAQ;AAAA,IACxB;AAAA,EACJ;AAAA;AACA,SAAS,cAAc,OAAO;AAE1B,SAAO,OAAO,UAAU,cAAc,EAAE,eAAU;AACtD;AACA,SAAS,kBAAkB,YAAY;AACnC,SAAO,WAAW,OAAO,OAAO,EAAE,KAAK,GAAG;AAC9C;",
  "names": ["loadChildren", "Console"]
}
